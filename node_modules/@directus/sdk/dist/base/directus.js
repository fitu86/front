"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Directus = void 0;
const handlers_1 = require("../handlers");
const items_1 = require("./items");
const transport_1 = require("./transport");
const auth_1 = require("./auth");
const storage_1 = require("./storage");
const graphql_1 = require("../handlers/graphql");
const singleton_1 = require("../handlers/singleton");
class Directus {
    constructor(url, options) {
        this._storage = (options === null || options === void 0 ? void 0 : options.storage) || (typeof window !== 'undefined' ? new storage_1.LocalStorage() : new storage_1.MemoryStorage());
        this._transport =
            (options === null || options === void 0 ? void 0 : options.transport) ||
                new transport_1.AxiosTransport(url, this._storage, () => __awaiter(this, void 0, void 0, function* () {
                    yield this._auth.refresh();
                }));
        this._auth = (options === null || options === void 0 ? void 0 : options.auth) || new auth_1.Auth(this._transport, this._storage);
        this._items = {};
        this._singletons = {};
    }
    get auth() {
        return this._auth;
    }
    get storage() {
        return this._storage;
    }
    get transport() {
        return this._transport;
    }
    get activity() {
        return this._activity || (this._activity = new handlers_1.ActivityHandler(this.transport));
    }
    get collections() {
        return (this._collections ||
            (this._collections = new handlers_1.CollectionsHandler(this.transport)));
    }
    get fields() {
        return this._fields || (this._fields = new handlers_1.FieldsHandler(this.transport));
    }
    get files() {
        return this._files || (this._files = new handlers_1.FilesHandler(this.transport));
    }
    get folders() {
        return this._folders || (this._folders = new handlers_1.FoldersHandler(this.transport));
    }
    get permissions() {
        return (this._permissions ||
            (this._permissions = new handlers_1.PermissionsHandler(this.transport)));
    }
    get presets() {
        return this._presets || (this._presets = new handlers_1.PresetsHandler(this.transport));
    }
    get relations() {
        return this._relations || (this._relations = new handlers_1.RelationsHandler(this.transport));
    }
    get revisions() {
        return this._revisions || (this._revisions = new handlers_1.RevisionsHandler(this.transport));
    }
    get roles() {
        return this._roles || (this._roles = new handlers_1.RolesHandler(this.transport));
    }
    get users() {
        return this._users || (this._users = new handlers_1.UsersHandler(this.transport));
    }
    get settings() {
        return this._settings || (this._settings = new handlers_1.SettingsHandler(this.transport));
    }
    get server() {
        return this._server || (this._server = new handlers_1.ServerHandler(this.transport));
    }
    get utils() {
        return this._utils || (this._utils = new handlers_1.UtilsHandler(this.transport));
    }
    get graphql() {
        return this._graphql || (this._graphql = new graphql_1.GraphQLHandler(this.transport));
    }
    singleton(collection) {
        return (this._singletons[collection] ||
            (this._singletons[collection] = new singleton_1.SingletonHandler(collection, this.transport)));
    }
    items(collection) {
        return this._items[collection] || (this._items[collection] = new items_1.ItemsHandler(collection, this.transport));
    }
}
exports.Directus = Directus;
