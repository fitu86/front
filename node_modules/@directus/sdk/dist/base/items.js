"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ItemsHandler = void 0;
class ItemsHandler {
    constructor(collection, transport) {
        this.transport = transport;
        this.endpoint = collection.startsWith('directus_') ? `/${collection.substring(9)}` : `/items/${collection}`;
    }
    readOne(id, query) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transport.get(`${this.endpoint}/${encodeURI(id)}`, {
                params: query,
            });
            return response.data;
        });
    }
    readMany(query) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data, meta } = yield this.transport.get(`${this.endpoint}`, {
                params: query,
            });
            return {
                data,
                meta,
            };
        });
    }
    createOne(item, query) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.transport.post(`${this.endpoint}`, item, {
                params: query,
            })).data;
        });
    }
    createMany(items, query) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.transport.post(`${this.endpoint}`, items, {
                params: query,
            });
        });
    }
    updateOne(id, item, query) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.transport.patch(`${this.endpoint}/${encodeURI(id)}`, item, {
                params: query,
            })).data;
        });
    }
    updateMany(ids, data, query) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.transport.patch(`${this.endpoint}`, {
                keys: ids,
                data,
            }, {
                params: query,
            });
        });
    }
    updateByQuery(updateQuery, data, query) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.transport.patch(`${this.endpoint}`, {
                query: updateQuery,
                data,
            }, {
                params: query,
            });
        });
    }
    deleteOne(id) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.transport.delete(`${this.endpoint}/${encodeURI(id)}`);
        });
    }
    deleteMany(ids) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.transport.delete(`${this.endpoint}`, ids);
        });
    }
}
exports.ItemsHandler = ItemsHandler;
