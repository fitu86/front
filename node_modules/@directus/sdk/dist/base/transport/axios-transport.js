"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AxiosTransport = void 0;
const axios_1 = __importDefault(require("axios"));
const transport_1 = require("../../transport");
/**
 * Axios transport implementation
 */
class AxiosTransport {
    constructor(url, storage, refresh = () => Promise.resolve()) {
        this._url = url;
        this._storage = storage;
        this._axios = null;
        this._refresh = refresh;
        this.url = url;
    }
    get url() {
        return this._url;
    }
    set url(value) {
        this._url = value;
        this._axios = axios_1.default.create({
            baseURL: value,
            withCredentials: true,
        });
    }
    get axios() {
        return this._axios;
    }
    get requests() {
        return {
            intercept: (onFulfilled, onRejected) => {
                const id = this._axios.interceptors.request.use(onFulfilled, onRejected);
                return {
                    eject: () => {
                        this._axios.interceptors.request.eject(id);
                    },
                };
            },
        };
    }
    get responses() {
        return {
            intercept: (onFulfilled, onRejected) => {
                const id = this._axios.interceptors.response.use(onFulfilled, onRejected);
                return {
                    eject: () => {
                        this._axios.interceptors.response.eject(id);
                    },
                };
            },
        };
    }
    request(method, path, data, options) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                options = options || {};
                options.sendAuthorizationHeaders = (_a = options.sendAuthorizationHeaders) !== null && _a !== void 0 ? _a : true;
                options.refreshTokenIfNeeded = (_b = options.refreshTokenIfNeeded) !== null && _b !== void 0 ? _b : true;
                options.headers = (_c = options.headers) !== null && _c !== void 0 ? _c : {};
                options.onUploadProgress = (_d = options.onUploadProgress) !== null && _d !== void 0 ? _d : undefined;
                if (options.refreshTokenIfNeeded) {
                    yield this._refresh();
                }
                const config = {
                    method,
                    url: path,
                    data: data,
                    params: options.params,
                    headers: options.headers,
                    onUploadProgress: options.onUploadProgress,
                };
                const token = this._storage.auth_token;
                const expiration = this._storage.auth_expires;
                if (options.sendAuthorizationHeaders) {
                    if (token && ((expiration !== null && expiration > Date.now()) || expiration === null)) {
                        if (token.startsWith(`Bearer `)) {
                            config.headers.Authorization = token;
                        }
                        else {
                            config.headers.Authorization = `Bearer ${token}`;
                        }
                    }
                }
                const response = yield this.axios.request(config);
                const responseData = response.data;
                const content = {
                    raw: response.data,
                    status: response.status,
                    statusText: response.statusText,
                    headers: response.headers,
                    data: responseData.data,
                    meta: responseData.meta,
                    errors: responseData.errors,
                };
                if (responseData.errors) {
                    throw new transport_1.TransportError(null, content);
                }
                return content;
            }
            catch (err) {
                if (!err || err instanceof Error === false) {
                    throw err;
                }
                if (axios_1.default.isAxiosError(err)) {
                    const data = (_e = err.response) === null || _e === void 0 ? void 0 : _e.data;
                    throw new transport_1.TransportError(err, {
                        raw: (_f = err.response) === null || _f === void 0 ? void 0 : _f.data,
                        status: (_g = err.response) === null || _g === void 0 ? void 0 : _g.status,
                        statusText: (_h = err.response) === null || _h === void 0 ? void 0 : _h.statusText,
                        headers: (_j = err.response) === null || _j === void 0 ? void 0 : _j.headers,
                        data: data === null || data === void 0 ? void 0 : data.data,
                        meta: data === null || data === void 0 ? void 0 : data.meta,
                        errors: data === null || data === void 0 ? void 0 : data.errors,
                    });
                }
                throw new transport_1.TransportError(err);
            }
        });
    }
    get(path, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.request('get', path, undefined, options);
        });
    }
    head(path, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.request('head', path, undefined, options);
        });
    }
    options(path, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.request('options', path, undefined, options);
        });
    }
    delete(path, data, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.request('delete', path, data, options);
        });
    }
    put(path, data, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.request('put', path, data, options);
        });
    }
    post(path, data, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.request('post', path, data, options);
        });
    }
    patch(path, data, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.request('patch', path, data, options);
        });
    }
}
exports.AxiosTransport = AxiosTransport;
