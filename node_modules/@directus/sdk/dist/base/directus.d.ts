import { IAuth } from '../auth';
import { IDirectus } from '../directus';
import { ActivityHandler, CollectionsHandler, FieldsHandler, FilesHandler, FoldersHandler, PermissionsHandler, PresetsHandler, RelationsHandler, RevisionsHandler, RolesHandler, ServerHandler, SettingsHandler, UsersHandler, UtilsHandler } from '../handlers';
import { IItems } from '../items';
import { ITransport } from '../transport';
import { IStorage } from '../storage';
import { TypeMap, TypeOf } from '../types';
import { GraphQLHandler } from '../handlers/graphql';
import { ISingleton } from '../singleton';
export declare type DirectusOptions = {
    auth?: IAuth;
    transport?: ITransport;
    storage?: IStorage;
};
export declare class Directus<T extends TypeMap> implements IDirectus<T> {
    private _auth;
    private _transport;
    private _storage;
    private _activity?;
    private _collections?;
    private _fields?;
    private _files?;
    private _folders?;
    private _permissions?;
    private _presets?;
    private _relations?;
    private _revisions?;
    private _roles?;
    private _users?;
    private _server?;
    private _utils?;
    private _graphql?;
    private _settings?;
    private _items;
    private _singletons;
    constructor(url: string, options?: DirectusOptions);
    get auth(): IAuth;
    get storage(): IStorage;
    get transport(): ITransport;
    get activity(): ActivityHandler<TypeOf<T, 'directus_activity'>>;
    get collections(): CollectionsHandler<TypeOf<T, 'directus_collections'>>;
    get fields(): FieldsHandler<TypeOf<T, 'directus_fields'>>;
    get files(): FilesHandler<TypeOf<T, 'directus_files'>>;
    get folders(): FoldersHandler<TypeOf<T, 'directus_folders'>>;
    get permissions(): PermissionsHandler<TypeOf<T, 'directus_permissions'>>;
    get presets(): PresetsHandler<TypeOf<T, 'directus_presets'>>;
    get relations(): RelationsHandler<TypeOf<T, 'directus_relations'>>;
    get revisions(): RevisionsHandler<TypeOf<T, 'directus_revisions'>>;
    get roles(): RolesHandler<TypeOf<T, 'directus_roles'>>;
    get users(): UsersHandler<TypeOf<T, 'directus_users'>>;
    get settings(): SettingsHandler<TypeOf<T, 'directus_settings'>>;
    get server(): ServerHandler;
    get utils(): UtilsHandler;
    get graphql(): GraphQLHandler;
    singleton<C extends string, I = TypeOf<T, C>>(collection: C): ISingleton<I>;
    items<C extends string, I = TypeOf<T, C>>(collection: C): IItems<I>;
}
//# sourceMappingURL=directus.d.ts.map