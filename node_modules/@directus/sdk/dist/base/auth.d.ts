import { AuthCredentials, AuthLoginOptions, AuthRefreshOptions, AuthResult, AuthToken, IAuth } from '../auth';
import { PasswordsHandler } from '../handlers/passwords';
import { IStorage } from '../storage';
import { ITransport } from '../transport';
export declare type AuthOptions = {
    mode?: 'json' | 'cookie';
    refresh?: AuthRefreshOptions;
};
export declare class Auth implements IAuth {
    readonly options: AuthOptions;
    private transport;
    private storage;
    private timer;
    private passwords?;
    private refresher;
    constructor(transport: ITransport, storage: IStorage, options?: AuthOptions);
    get token(): string | null;
    get password(): PasswordsHandler;
    get expiring(): boolean;
    private refreshToken;
    private updateStorage;
    private updateRefresh;
    refresh(force?: boolean): Promise<AuthResult | false>;
    login(credentials: AuthCredentials, options?: Partial<AuthLoginOptions>): Promise<AuthResult>;
    static(token: AuthToken): Promise<boolean>;
    logout(): Promise<void>;
}
//# sourceMappingURL=auth.d.ts.map