import { ITransport } from '../transport';
import { IItems, Item, QueryOne, QueryMany, OneItem, ManyItems, PartialItem } from '../items';
import { ID } from '../types';
export declare class ItemsHandler<T extends Item> implements IItems<T> {
    protected transport: ITransport;
    protected endpoint: string;
    constructor(collection: string, transport: ITransport);
    readOne(id: ID, query?: QueryOne<T>): Promise<OneItem<T>>;
    readMany(query?: QueryMany<T>): Promise<ManyItems<T>>;
    createOne(item: PartialItem<T>, query?: QueryOne<T>): Promise<OneItem<T>>;
    createMany(items: PartialItem<T>[], query?: QueryMany<T>): Promise<ManyItems<T>>;
    updateOne(id: ID, item: PartialItem<T>, query?: QueryOne<T>): Promise<OneItem<T>>;
    updateMany(ids: ID[], data: PartialItem<T>, query?: QueryMany<T>): Promise<ManyItems<T>>;
    updateByQuery(updateQuery: QueryMany<T>, data: PartialItem<T>, query?: QueryMany<T>): Promise<ManyItems<T>>;
    deleteOne(id: ID): Promise<void>;
    deleteMany(ids: ID[]): Promise<void>;
}
//# sourceMappingURL=items.d.ts.map