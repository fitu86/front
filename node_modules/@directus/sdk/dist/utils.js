"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Debouncer = void 0;
class Debouncer {
    constructor(func) {
        this.func = func;
        this.debounced = [];
        this.debouncing = false;
    }
    debounce(...args) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.debouncing) {
                return yield new Promise((resolve, reject) => {
                    this.debounced.push({
                        resolve: (value) => resolve(value),
                        reject: (error) => reject(error),
                    });
                });
            }
            this.debouncing = true;
            return new Promise((resolve, reject) => {
                this.func(...args)
                    .then((value) => {
                    const promises = [{ resolve, reject }, ...this.debounced];
                    this.debounced = [];
                    this.debouncing = false;
                    promises.forEach((promise) => promise.resolve(value));
                })
                    .catch((error) => {
                    const promises = [{ resolve, reject }, ...this.debounced];
                    this.debounced = [];
                    this.debouncing = false;
                    promises.forEach((promise) => promise.reject(error));
                });
            });
        });
    }
}
exports.Debouncer = Debouncer;
