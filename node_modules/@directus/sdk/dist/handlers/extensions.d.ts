/**
 * Settings handler
 */
import { ITransport, TransportOptions, TransportResponse } from '../transport';
export declare class ExtensionEndpoint implements ITransport {
    private name;
    private transport;
    get url(): string;
    set url(value: string);
    constructor(transport: ITransport, name: string);
    private endpoint;
    get<T = any>(path: string, options?: TransportOptions): Promise<TransportResponse<T>>;
    head<T = any>(path: string, options?: TransportOptions): Promise<TransportResponse<T>>;
    options<T = any>(path: string, options?: TransportOptions): Promise<TransportResponse<T>>;
    delete<T = any, P = any>(path: string, data?: P, options?: TransportOptions): Promise<TransportResponse<T>>;
    post<T = any, P = any>(path: string, data?: P, options?: TransportOptions): Promise<TransportResponse<T>>;
    put<T = any, P = any>(path: string, data?: P, options?: TransportOptions): Promise<TransportResponse<T>>;
    patch<T = any, P = any>(path: string, data?: P, options?: TransportOptions): Promise<TransportResponse<T>>;
}
export declare class ExtensionHandler {
    private transport;
    constructor(transport: ITransport);
    endpoint(name: string): ExtensionEndpoint;
}
//# sourceMappingURL=extensions.d.ts.map