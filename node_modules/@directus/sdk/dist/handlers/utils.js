"use strict";
/**
 * Utils handler
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UtilsHandler = void 0;
class UtilsHandler {
    constructor(transport) {
        this.random = {
            string: (length = 32) => __awaiter(this, void 0, void 0, function* () {
                const result = yield this.transport.get('/utils/random/string', { params: { length } });
                return result.data;
            }),
        };
        this.hash = {
            generate: (string) => __awaiter(this, void 0, void 0, function* () {
                const result = yield this.transport.post('/utils/hash/generate', { string });
                return result.data;
            }),
            verify: (string, hash) => __awaiter(this, void 0, void 0, function* () {
                const result = yield this.transport.post('/utils/hash/verify', { string, hash });
                return result.data;
            }),
        };
        this.transport = transport;
    }
    sort(collection, item, to) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.transport.post(`/utils/sort/${encodeURI(collection)}`, { item, to });
        });
    }
    revert(revision) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.transport.post(`/utils/revert/${encodeURI(revision)}`);
        });
    }
}
exports.UtilsHandler = UtilsHandler;
