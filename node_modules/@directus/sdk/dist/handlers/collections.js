"use strict";
/**
 * Collections handler
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CollectionsHandler = void 0;
class CollectionsHandler {
    constructor(transport) {
        this.transport = transport;
    }
    readOne(collection) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.transport.get(`/collections/${collection}`);
            return response.data;
        });
    }
    readAll() {
        return __awaiter(this, void 0, void 0, function* () {
            const { data, meta } = yield this.transport.get(`/collections`);
            return {
                data,
                meta,
            };
        });
    }
    createOne(collection) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.transport.post(`/collections`, collection)).data;
        });
    }
    createMany(collections) {
        return __awaiter(this, void 0, void 0, function* () {
            const { data, meta } = yield this.transport.post(`/collections`, collections);
            return {
                data,
                meta,
            };
        });
    }
    updateOne(collection, item, query) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.transport.patch(`/collections/${collection}`, item, {
                params: query,
            })).data;
        });
    }
    deleteOne(collection) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.transport.delete(`/collections/${collection}`);
        });
    }
}
exports.CollectionsHandler = CollectionsHandler;
